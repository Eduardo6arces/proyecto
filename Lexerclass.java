// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/lexer.flex

import java.io.BufferedWriter; 
import java.io.File;
import java.io.FileWriter; 
import java.io.IOException;
import java.io.Reader; 

@SuppressWarnings("fallthrough")
public class Lexerclass {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\4\1\23\0\1\2\6\0\1\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\12\13\1\14\1\15"+
    "\1\16\1\17\1\20\2\0\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\32\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\3\32\1\0\1\47\2\0\1\50"+
    "\1\0\22\32\1\51\7\32\1\52\1\0\1\53\7\0"+
    "\1\1\u01a2\0\2\1\326\0\u0100\1";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\14\20\1\1\1\21\1\22\1\23\1\0\1\24"+
    "\5\20\1\25\10\20\1\26\1\27\3\20\1\30\1\31"+
    "\14\20\1\32\6\20\1\33\1\34\5\20\1\35\3\20"+
    "\1\36\1\20\1\37\5\20\1\40\20\20\1\41\7\20"+
    "\1\42\6\20\1\43\4\20\1\44\3\20\1\45\2\20"+
    "\1\46\2\20\1\47\2\20\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\54\0\130\0\54\0\54\0\54\0\54"+
    "\0\54\0\54\0\54\0\204\0\54\0\54\0\54\0\260"+
    "\0\54\0\334\0\u0108\0\u0134\0\u0160\0\u018c\0\u01b8\0\u01e4"+
    "\0\u0210\0\u023c\0\u0268\0\u0294\0\u02c0\0\u02ec\0\54\0\54"+
    "\0\54\0\u0318\0\54\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4"+
    "\0\u0108\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u0528"+
    "\0\u0554\0\u02ec\0\u0318\0\u0580\0\u05ac\0\u05d8\0\u0108\0\u0108"+
    "\0\u0604\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738"+
    "\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0108\0\u0814\0\u0840\0\u086c"+
    "\0\u0898\0\u08c4\0\u08f0\0\u0108\0\u0108\0\u091c\0\u0948\0\u0974"+
    "\0\u09a0\0\u09cc\0\u0108\0\u09f8\0\u0a24\0\u0a50\0\u0108\0\u0a7c"+
    "\0\u0108\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0108\0\u0b84"+
    "\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4"+
    "\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u0108"+
    "\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c\0\u0108"+
    "\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\u0108\0\u1080"+
    "\0\u10ac\0\u10d8\0\u1104\0\u0108\0\u1130\0\u115c\0\u1188\0\u0108"+
    "\0\u11b4\0\u11e0\0\u0108\0\u120c\0\u1238\0\u0108\0\u1264\0\u1290"+
    "\0\u0108";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\2\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\2\23\1\24\1\25\1\26\2\23\1\27"+
    "\3\23\1\30\2\23\1\31\1\32\1\33\1\34\2\23"+
    "\1\35\1\36\2\23\1\37\1\40\73\0\1\41\45\0"+
    "\1\42\1\0\1\14\57\0\1\43\47\0\1\23\5\0"+
    "\2\23\1\44\23\23\1\0\2\23\15\0\1\23\5\0"+
    "\26\23\1\0\2\23\15\0\1\23\5\0\4\23\1\45"+
    "\21\23\1\0\2\23\15\0\1\23\5\0\13\23\1\46"+
    "\1\23\1\47\10\23\1\0\2\23\15\0\1\23\5\0"+
    "\16\23\1\50\7\23\1\0\2\23\15\0\1\23\5\0"+
    "\5\23\1\51\20\23\1\0\2\23\15\0\1\23\5\0"+
    "\16\23\1\52\7\23\1\0\2\23\15\0\1\23\5\0"+
    "\1\53\25\23\1\0\2\23\15\0\1\23\5\0\4\23"+
    "\1\54\21\23\1\0\2\23\15\0\1\23\5\0\7\23"+
    "\1\55\12\23\1\56\3\23\1\0\2\23\15\0\1\23"+
    "\5\0\7\23\1\57\13\23\1\60\2\23\1\0\2\23"+
    "\15\0\1\23\5\0\7\23\1\61\16\23\1\0\2\23"+
    "\53\0\1\62\15\0\1\63\53\0\1\23\5\0\22\23"+
    "\1\64\3\23\1\0\2\23\15\0\1\23\5\0\1\65"+
    "\25\23\1\0\2\23\15\0\1\23\5\0\21\23\1\66"+
    "\4\23\1\0\2\23\15\0\1\23\5\0\3\23\1\67"+
    "\22\23\1\0\2\23\15\0\1\23\5\0\20\23\1\70"+
    "\5\23\1\0\2\23\15\0\1\23\5\0\24\23\1\71"+
    "\1\23\1\0\2\23\15\0\1\23\5\0\23\23\1\72"+
    "\2\23\1\0\2\23\15\0\1\23\5\0\1\73\20\23"+
    "\1\74\4\23\1\0\2\23\15\0\1\23\5\0\23\23"+
    "\1\75\2\23\1\0\2\23\15\0\1\23\5\0\1\76"+
    "\15\23\1\77\7\23\1\0\2\23\15\0\1\23\5\0"+
    "\4\23\1\100\21\23\1\0\2\23\15\0\1\23\5\0"+
    "\20\23\1\101\5\23\1\0\2\23\15\0\1\23\5\0"+
    "\10\23\1\102\15\23\1\0\2\23\15\0\1\23\5\0"+
    "\10\23\1\103\15\23\1\0\2\23\15\0\1\23\5\0"+
    "\2\23\1\104\23\23\1\0\2\23\15\0\1\23\5\0"+
    "\4\23\1\105\21\23\1\0\2\23\15\0\1\23\5\0"+
    "\4\23\1\106\21\23\1\0\2\23\15\0\1\23\5\0"+
    "\21\23\1\107\4\23\1\0\2\23\15\0\1\23\5\0"+
    "\3\23\1\110\22\23\1\0\2\23\15\0\1\23\5\0"+
    "\23\23\1\111\2\23\1\0\2\23\15\0\1\23\5\0"+
    "\22\23\1\112\3\23\1\0\2\23\15\0\1\23\5\0"+
    "\20\23\1\113\5\23\1\0\2\23\15\0\1\23\5\0"+
    "\17\23\1\114\6\23\1\0\2\23\15\0\1\23\5\0"+
    "\15\23\1\115\10\23\1\0\2\23\15\0\1\23\5\0"+
    "\15\23\1\116\10\23\1\0\2\23\15\0\1\23\5\0"+
    "\13\23\1\117\12\23\1\0\2\23\15\0\1\23\5\0"+
    "\24\23\1\120\1\23\1\0\2\23\15\0\1\23\5\0"+
    "\22\23\1\121\3\23\1\0\2\23\15\0\1\23\5\0"+
    "\26\23\1\0\1\122\1\23\15\0\1\23\5\0\4\23"+
    "\1\123\21\23\1\0\2\23\15\0\1\23\5\0\26\23"+
    "\1\0\1\124\1\23\15\0\1\23\5\0\14\23\1\125"+
    "\11\23\1\0\2\23\15\0\1\23\5\0\3\23\1\126"+
    "\22\23\1\0\2\23\15\0\1\23\5\0\22\23\1\127"+
    "\3\23\1\0\2\23\15\0\1\23\5\0\26\23\1\0"+
    "\1\130\1\23\15\0\1\23\5\0\4\23\1\131\21\23"+
    "\1\0\2\23\15\0\1\23\5\0\1\132\25\23\1\0"+
    "\2\23\15\0\1\23\5\0\10\23\1\133\15\23\1\0"+
    "\2\23\15\0\1\23\5\0\1\23\1\134\3\23\1\135"+
    "\20\23\1\0\2\23\15\0\1\23\5\0\21\23\1\136"+
    "\4\23\1\0\2\23\15\0\1\23\5\0\4\23\1\137"+
    "\21\23\1\0\2\23\15\0\1\23\5\0\16\23\1\140"+
    "\7\23\1\0\2\23\15\0\1\23\5\0\13\23\1\141"+
    "\4\23\1\142\5\23\1\0\2\23\15\0\1\23\5\0"+
    "\22\23\1\143\3\23\1\0\2\23\15\0\1\23\5\0"+
    "\24\23\1\144\1\23\1\0\2\23\15\0\1\23\5\0"+
    "\1\145\25\23\1\0\2\23\15\0\1\23\5\0\16\23"+
    "\1\146\7\23\1\0\2\23\15\0\1\23\5\0\4\23"+
    "\1\147\21\23\1\0\2\23\15\0\1\23\5\0\25\23"+
    "\1\150\1\0\2\23\15\0\1\23\5\0\4\23\1\151"+
    "\21\23\1\0\2\23\15\0\1\23\5\0\10\23\1\152"+
    "\15\23\1\0\2\23\15\0\1\23\5\0\4\23\1\153"+
    "\21\23\1\0\2\23\15\0\1\23\5\0\1\154\25\23"+
    "\1\0\2\23\15\0\1\23\5\0\2\23\1\155\23\23"+
    "\1\0\2\23\15\0\1\23\5\0\20\23\1\156\5\23"+
    "\1\0\2\23\15\0\1\23\5\0\15\23\1\157\10\23"+
    "\1\0\2\23\15\0\1\23\5\0\15\23\1\160\10\23"+
    "\1\0\2\23\15\0\1\23\5\0\5\23\1\161\20\23"+
    "\1\0\2\23\15\0\1\23\5\0\6\23\1\162\17\23"+
    "\1\0\2\23\15\0\1\23\5\0\26\23\1\0\1\163"+
    "\1\23\15\0\1\23\5\0\22\23\1\164\3\23\1\0"+
    "\2\23\15\0\1\23\5\0\12\23\1\165\13\23\1\0"+
    "\2\23\15\0\1\23\5\0\25\23\1\166\1\0\2\23"+
    "\15\0\1\23\5\0\21\23\1\167\4\23\1\0\2\23"+
    "\15\0\1\23\5\0\22\23\1\170\3\23\1\0\2\23"+
    "\15\0\1\23\5\0\7\23\1\171\16\23\1\0\2\23"+
    "\15\0\1\23\5\0\21\23\1\172\4\23\1\0\2\23"+
    "\15\0\1\23\5\0\4\23\1\173\21\23\1\0\2\23"+
    "\15\0\1\23\5\0\25\23\1\174\1\0\2\23\15\0"+
    "\1\23\5\0\1\175\25\23\1\0\2\23\15\0\1\23"+
    "\5\0\16\23\1\176\7\23\1\0\2\23\15\0\1\23"+
    "\5\0\22\23\1\177\3\23\1\0\2\23\15\0\1\23"+
    "\5\0\4\23\1\200\21\23\1\0\2\23\15\0\1\23"+
    "\5\0\26\23\1\0\1\201\1\23\15\0\1\23\5\0"+
    "\1\202\25\23\1\0\2\23\15\0\1\23\5\0\20\23"+
    "\1\203\5\23\1\0\2\23\15\0\1\23\5\0\20\23"+
    "\1\204\5\23\1\0\2\23\15\0\1\23\5\0\15\23"+
    "\1\205\10\23\1\0\2\23\15\0\1\23\5\0\21\23"+
    "\1\206\4\23\1\0\2\23\15\0\1\23\5\0\20\23"+
    "\1\207\5\23\1\0\2\23\15\0\1\23\5\0\3\23"+
    "\1\210\22\23\1\0\2\23\15\0\1\23\5\0\21\23"+
    "\1\211\4\23\1\0\2\23\15\0\1\23\5\0\4\23"+
    "\1\212\21\23\1\0\2\23\15\0\1\23\5\0\3\23"+
    "\1\213\22\23\1\0\2\23\15\0\1\23\5\0\16\23"+
    "\1\214\7\23\1\0\2\23\15\0\1\23\5\0\15\23"+
    "\1\215\10\23\1\0\2\23\15\0\1\23\5\0\20\23"+
    "\1\216\5\23\1\0\2\23\15\0\1\23\5\0\21\23"+
    "\1\217\4\23\1\0\2\23\15\0\1\23\5\0\16\23"+
    "\1\220\7\23\1\0\2\23\15\0\1\23\5\0\20\23"+
    "\1\221\5\23\1\0\2\23\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[4796];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\7\11\1\1\3\11\1\1\1\11"+
    "\15\1\3\11\1\0\1\11\156\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
private BufferedWriter writer;



    public boolean isEOF() {
    return (zzAtEOF);
}

public Lexerclass (Reader in, BufferedWriter writer) {
this.zzReader = in;
this.writer = writer;
}

private void escribeToken(String lexema, String token) {
try {
writer.write(lexema + " - " + token + "\n");
} catch (IOException e) { 
e.printStackTrace();
}
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexerclass(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Unknown symbol: " + yytext());
            }
          // fall through
          case 41: break;
          case 2:
            { System.out.print(yytext());
            }
          // fall through
          case 42: break;
          case 3:
            { escribeToken(yytext(), "PARENTESIS_ABIERTO");
            }
          // fall through
          case 43: break;
          case 4:
            { escribeToken(yytext(), "PARENTESIS_CERRADO");
            }
          // fall through
          case 44: break;
          case 5:
            { escribeToken(yytext(), "MULTIPLICAR");
            }
          // fall through
          case 45: break;
          case 6:
            { escribeToken(yytext(), "SUMAR");
            }
          // fall through
          case 46: break;
          case 7:
            { escribeToken(yytext(), "COMA");
            }
          // fall through
          case 47: break;
          case 8:
            { escribeToken(yytext(), "RESTAR");
            }
          // fall through
          case 48: break;
          case 9:
            { escribeToken(yytext(), "DIVIDIR");
            }
          // fall through
          case 49: break;
          case 10:
            { escribeToken(yytext(), "NUMERO_ENTERO");
            }
          // fall through
          case 50: break;
          case 11:
            { escribeToken(yytext(), "DOS_PUNTOS");
            }
          // fall through
          case 51: break;
          case 12:
            { escribeToken(yytext(), "PUNTO_Y_COMA");
            }
          // fall through
          case 52: break;
          case 13:
            { escribeToken(yytext(), "MENOR_QUE");
            }
          // fall through
          case 53: break;
          case 14:
            { escribeToken(yytext(), "ASIGNAR");
            }
          // fall through
          case 54: break;
          case 15:
            { escribeToken(yytext(), "MAYOR_QUE");
            }
          // fall through
          case 55: break;
          case 16:
            { escribeToken(yytext(), "IDENTIFICADOR");
            }
          // fall through
          case 56: break;
          case 17:
            { escribeToken(yytext(), "LLAVE_ABIERTA");
            }
          // fall through
          case 57: break;
          case 18:
            { escribeToken(yytext(), "LLAVE_CERRADA");
            }
          // fall through
          case 58: break;
          case 19:
            { escribeToken(yytext(), "NO_IGUAL");
            }
          // fall through
          case 59: break;
          case 20:
            { escribeToken(yytext(), "IGUAL_A");
            }
          // fall through
          case 60: break;
          case 21:
            { escribeToken(yytext(), "SI");
            }
          // fall through
          case 61: break;
          case 22:
            { /* Ignorar espacios en blanco */
            }
          // fall through
          case 62: break;
          case 23:
            { escribeToken(yytext(), "FLOTANTE");
            }
          // fall through
          case 63: break;
          case 24:
            { escribeToken(yytext(), "FIN");
            }
          // fall through
          case 64: break;
          case 25:
            { escribeToken(yytext(), "PARA");
            }
          // fall through
          case 65: break;
          case 26:
            { escribeToken(yytext(), "SINO");
            }
          // fall through
          case 66: break;
          case 27:
            { escribeToken(yytext(), "DETENER");
            }
          // fall through
          case 67: break;
          case 28:
            { escribeToken(yytext(), "ENTONCES");
            }
          // fall through
          case 68: break;
          case 29:
            { escribeToken(yytext(), "PAUSA");
            }
          // fall through
          case 69: break;
          case 30:
            { escribeToken(yytext(), "INICIAR");
            }
          // fall through
          case 70: break;
          case 31:
            { escribeToken(yytext(), "MIENTRAS");
            }
          // fall through
          case 71: break;
          case 32:
            { escribeToken(yytext(), "REANUDAR");
            }
          // fall through
          case 72: break;
          case 33:
            { escribeToken(yytext(), "APAGAR");
            }
          // fall through
          case 73: break;
          case 34:
            { escribeToken(yytext(), "GIRAR_IZQUIERDA");
            }
          // fall through
          case 74: break;
          case 35:
            { escribeToken(yytext(), "GIRAR_DERECHA");
            }
          // fall through
          case 75: break;
          case 36:
            { escribeToken(yytext(), "LEER_SENSOR");
            }
          // fall through
          case 76: break;
          case 37:
            { escribeToken(yytext(), "AVANZAR");
            }
          // fall through
          case 77: break;
          case 38:
            { escribeToken(yytext(), "RETROCEDER");
            }
          // fall through
          case 78: break;
          case 39:
            { escribeToken(yytext(), "ACTIVAR_SENSOR");
            }
          // fall through
          case 79: break;
          case 40:
            { escribeToken(yytext(), "DESACTIVAR_SENSOR");
            }
          // fall through
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexerclass [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexerclass scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexerclass(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
